{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n    }\n    filterZero(row) {\n        return row.filter((num)=>num !== 0);\n    }\n    renderBoard() {\n        const cells = document.querySelectorAll(\".game-field td\");\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const index = row * 4 + col;\n            const cell = cells[index];\n            const value = this.board[row][col];\n            cell.classList = \"field-cell\";\n            if (value === 0) cell.textContent = \"\";\n            else {\n                cell.textContent = value;\n                cell.classList.add(`field-cell--${value}`);\n            }\n        }\n        const scoreNumber = document.querySelector(\".game-score\");\n        scoreNumber.textContent = `${this.score}`;\n    }\n    spawnNumber() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const numberToSpawn = Math.random() < 0.1 ? 4 : 2;\n        this.board[randCell.row][randCell.col] = numberToSpawn;\n        this.renderBoard();\n    }\n    isGameOver() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 2048) return \"win\";\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return \"playing\";\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return \"playing\";\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return \"playing\";\n        }\n        return \"lose\";\n    }\n    moveLeft() {\n        for(let i = 0; i < 4; i++){\n            let row = this.board[i];\n            row = this.filterZero(row);\n            for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n                row[j] *= 2;\n                row[j + 1] = 0;\n                this.score += row[j];\n            }\n            row = this.filterZero(row);\n            while(row.length < 4)row.push(0);\n            this.board[i] = row;\n        }\n        this.renderBoard();\n        this.spawnNumber();\n        this.checkGameStatus();\n    }\n    moveRight() {\n        for(let i = 0; i < 4; i++){\n            let row = this.board[i].reverse();\n            row = this.filterZero(row);\n            for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n                row[j] *= 2;\n                row[j + 1] = 0;\n                this.score += row[j];\n            }\n            row = this.filterZero(row);\n            while(row.length < 4)row.push(0);\n            this.board[i] = row.reverse();\n        }\n        this.renderBoard();\n        this.spawnNumber();\n        this.checkGameStatus();\n    }\n    moveUp() {\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            column = this.filterZero(column);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                column[i + 1] = 0;\n                this.score += column[i];\n            }\n            column = this.filterZero(column);\n            while(column.length < 4)column.push(0);\n            for(let row = 0; row < 4; row++)this.board[row][col] = column[row];\n        }\n        this.renderBoard();\n        this.spawnNumber();\n        this.checkGameStatus();\n    }\n    moveDown() {\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            column = this.filterZero(column);\n            column.reverse();\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                column[i + 1] = 0;\n                this.score += column[i];\n            }\n            column = this.filterZero(column);\n            while(column.length < 4)column.push(0);\n            column.reverse();\n            for(let row = 0; row < 4; row++)this.board[row][col] = column[row];\n        }\n        this.renderBoard();\n        const nextBoard = JSON.stringify(this.getState());\n        if (this.currentBoard !== nextBoard) this.spawnNumber();\n        this.checkGameStatus();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        const messageContainer = document.querySelector(\".message-container\");\n        const visibleMessage = messageContainer.querySelector(\"p:not(.hidden)\");\n        if (visibleMessage) {\n            const mesClass = visibleMessage.classList;\n            switch(mesClass){\n                case \"message message-start\":\n                    return \"idle\";\n                case \"message message-win\":\n                    return \"win\";\n                case \"message message-lose\":\n                    return \"lose\";\n            }\n        } else return `playing`;\n    }\n    checkGameStatus() {\n        const curStatus = this.isGameOver();\n        if (curStatus === \"win\" || curStatus === \"lose\") this.showMessage(curStatus);\n    }\n    showMessage(type) {\n        const message = document.querySelector(`.message.message-${type}`);\n        message.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", this.boundKeyDown);\n    }\n    start() {\n        const cells = document.querySelectorAll(\".game-field td\");\n        const cellIndexes = Array.from({\n            length: cells.length\n        }, (_, i)=>i);\n        const shuffledIndexes = cellIndexes.sort(()=>0.5 - Math.random());\n        const chosenIndexes = shuffledIndexes.slice(0, 2);\n        chosenIndexes.forEach((index)=>{\n            cells[index].textContent = \"2\";\n            cells[index].classList.add(\"field-cell--2\");\n            const rowIndex = Math.floor(index / 4);\n            const colIndex = index % 4;\n            this.board[rowIndex][colIndex] = 2;\n        });\n        const footerMessage = document.querySelector(\".message.message-start\");\n        footerMessage.classList.add(\"hidden\");\n        this.boundKeyDown = this.keyDown.bind(this);\n        document.addEventListener(\"keydown\", this.boundKeyDown);\n    }\n    restart() {\n        const cells = document.querySelectorAll(\".game-field td\");\n        cells.forEach((cell)=>{\n            cell.classList = \"field-cell\";\n            cell.textContent = \"\";\n        });\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++)this.board[row][column] = 0;\n        const footerMessage = document.querySelector(\".message.message-start\");\n        footerMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", this.boundKeyDown);\n    }\n    keyDown(e) {\n        e.preventDefault();\n        switch(e.key){\n            case \"ArrowUp\":\n                this.moveUp();\n                break;\n            case \"ArrowDown\":\n                this.moveDown();\n                break;\n            case \"ArrowLeft\":\n                this.moveLeft();\n                break;\n            case \"ArrowRight\":\n                this.moveRight();\n                break;\n        }\n        this.checkGameStatus();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// start / restart\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\"button.start\");\nlet $09e991522ca7e64e$var$switcher = 0;\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", (ev)=>{\n    $09e991522ca7e64e$var$switcher++;\n    if ($09e991522ca7e64e$var$switcher % 2 === 1) {\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart();\n    }\n});\n\n\n//# sourceMappingURL=index.673ee22b.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// start / restart\nconst startButton = document.querySelector('button.start');\nlet switcher = 0;\n\nstartButton.addEventListener('click', (ev) => {\n  switcher++;\n\n  if (switcher % 2 === 1) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n    game.start();\n  } else {\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n    game.restart();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n  }\n\n  filterZero(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  renderBoard() {\n    const cells = document.querySelectorAll('.game-field td');\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const index = row * 4 + col;\n        const cell = cells[index];\n        const value = this.board[row][col];\n\n        cell.classList = 'field-cell';\n\n        if (value === 0) {\n          cell.textContent = '';\n        } else {\n          cell.textContent = value;\n          cell.classList.add(`field-cell--${value}`);\n        }\n      }\n    }\n\n    const scoreNumber = document.querySelector('.game-score');\n\n    scoreNumber.textContent = `${this.score}`;\n  }\n\n  spawnNumber() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const numberToSpawn = Math.random() < 0.1 ? 4 : 2;\n\n    this.board[randCell.row][randCell.col] = numberToSpawn;\n    this.renderBoard();\n  }\n\n  isGameOver() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          return 'win';\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return 'playing';\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return 'playing';\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return 'playing';\n        }\n      }\n    }\n\n    return 'lose';\n  }\n\n  moveLeft() {\n    for (let i = 0; i < 4; i++) {\n      let row = this.board[i];\n\n      row = this.filterZero(row);\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          row[j] *= 2;\n          row[j + 1] = 0;\n          this.score += row[j];\n        }\n      }\n      row = this.filterZero(row);\n\n      while (row.length < 4) {\n        row.push(0);\n      }\n      this.board[i] = row;\n    }\n    this.renderBoard();\n    this.spawnNumber();\n    this.checkGameStatus();\n  }\n\n  moveRight() {\n    for (let i = 0; i < 4; i++) {\n      let row = this.board[i].reverse();\n\n      row = this.filterZero(row);\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          row[j] *= 2;\n          row[j + 1] = 0;\n          this.score += row[j];\n        }\n      }\n      row = this.filterZero(row);\n\n      while (row.length < 4) {\n        row.push(0);\n      }\n      this.board[i] = row.reverse();\n    }\n    this.renderBoard();\n    this.spawnNumber();\n    this.checkGameStatus();\n  }\n\n  moveUp() {\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n      column = this.filterZero(column);\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          column[i + 1] = 0;\n          this.score += column[i];\n        }\n      }\n      column = this.filterZero(column);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n    this.renderBoard();\n    this.spawnNumber();\n    this.checkGameStatus();\n  }\n\n  moveDown() {\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n      column = this.filterZero(column);\n      column.reverse();\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          column[i + 1] = 0;\n          this.score += column[i];\n        }\n      }\n      column = this.filterZero(column);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n      column.reverse();\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n    this.renderBoard();\n\n    const nextBoard = JSON.stringify(this.getState());\n\n    if (this.currentBoard !== nextBoard) {\n      this.spawnNumber();\n    }\n    this.checkGameStatus();\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    const messageContainer = document.querySelector('.message-container');\n    const visibleMessage = messageContainer.querySelector('p:not(.hidden)');\n\n    if (visibleMessage) {\n      const mesClass = visibleMessage.classList;\n\n      switch (mesClass) {\n        case 'message message-start':\n          return 'idle';\n        case 'message message-win':\n          return 'win';\n        case 'message message-lose':\n          return 'lose';\n      }\n    } else {\n      return `playing`;\n    }\n  }\n\n  checkGameStatus() {\n    const curStatus = this.isGameOver();\n\n    if (curStatus === 'win' || curStatus === 'lose') {\n      this.showMessage(curStatus);\n    }\n  }\n\n  showMessage(type) {\n    const message = document.querySelector(`.message.message-${type}`);\n\n    message.classList.remove('hidden');\n    document.removeEventListener('keydown', this.boundKeyDown);\n  }\n\n  start() {\n    const cells = document.querySelectorAll('.game-field td');\n    const cellIndexes = Array.from({ length: cells.length }, (_, i) => i);\n    const shuffledIndexes = cellIndexes.sort(() => 0.5 - Math.random());\n    const chosenIndexes = shuffledIndexes.slice(0, 2);\n\n    chosenIndexes.forEach((index) => {\n      cells[index].textContent = '2';\n      cells[index].classList.add('field-cell--2');\n\n      const rowIndex = Math.floor(index / 4);\n      const colIndex = index % 4;\n\n      this.board[rowIndex][colIndex] = 2;\n    });\n\n    const footerMessage = document.querySelector('.message.message-start');\n\n    footerMessage.classList.add('hidden');\n    this.boundKeyDown = this.keyDown.bind(this);\n    document.addEventListener('keydown', this.boundKeyDown);\n  }\n\n  restart() {\n    const cells = document.querySelectorAll('.game-field td');\n\n    cells.forEach((cell) => {\n      cell.classList = 'field-cell';\n      cell.textContent = '';\n    });\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        this.board[row][column] = 0;\n      }\n    }\n\n    const footerMessage = document.querySelector('.message.message-start');\n\n    footerMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', this.boundKeyDown);\n  }\n\n  keyDown(e) {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowUp':\n        this.moveUp();\n        break;\n      case 'ArrowDown':\n        this.moveDown();\n        break;\n      case 'ArrowLeft':\n        this.moveLeft();\n        break;\n      case 'ArrowRight':\n        this.moveRight();\n        break;\n    }\n    this.checkGameStatus();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","filterZero","row","filter","num","renderBoard","cells","document","querySelectorAll","col","cell","value","classList","textContent","add","scoreNumber","querySelector","spawnNumber","emptyCells","push","length","randCell","Math","floor","random","numberToSpawn","isGameOver","moveLeft","i","j","checkGameStatus","moveRight","reverse","moveUp","column","moveDown","nextBoard","JSON","stringify","getState","currentBoard","getScore","getStatus","visibleMessage","messageContainer","curStatus","showMessage","type","message","remove","removeEventListener","boundKeyDown","start","chosenIndexes","shuffledIndexes","cellIndexes","Array","from","_","sort","slice","forEach","index","rowIndex","footerMessage","keyDown","bind","addEventListener","restart","e","preventDefault","key","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$switcher","ev"],"version":3,"file":"index.673ee22b.js.map"}